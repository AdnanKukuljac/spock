#summary Learn how to specify interactions between your objects.

*This article is a stub. You can help Spock by expanding it.*

=== Creating Mocks ===

Mocks can be created for interfaces, non-final Java classes, and non-final Groovy classes (experimental). Currently all mocks are lenient. If a method is called that does not match any specified interaction, no error occurs and the default value for the method's return type is returned.

{{{
def subscriber = Mock(Subscriber) // "dynamic" style (mock name inferred from variable name)

Subscriber subscriber = Mock()    // "static" style" (mock name/type inferred from variable name/type)
}}}

=== Global vs. scoped interactions ===

Interactions defined outside of a `then` block are called _global_. They are valid from the point of their definition to the end of the feature method.

{{{
setup:
subscriber.isValid() >> true
}}}

Interactions defined inside of a `then` block are called _scoped_. They are valid only within the preceding `when` block.

{{{
when: publisher.send(msg)
then: 1 * subscriber.receive(msg)
}}}

=== Optional vs. required interaction ===

Optional interactions don't have a cardinality, and must have a return value.

{{{
then: subscriber.isValid() >> true
}}}

Required interactions must have a cardinality, and may have a return value.

{{{
then: 1 * subscriber.isValid() >> true

then: n * subscriber.receive(msg)
}}}

Currently, optional interactions can be global or scoped, but required interactions must be scoped.

=== Cardinalities ===

{{{
n * subscriber.receive(msg)      // exactly n times

(n.._) * subscriber.receive(msg) // at least n times

(_..n) * subscriber.receive(msg) // at most n times 
}}}

=== Target constraints ===

{{{
_.receive(msg) // receive is called on any target (i.e. mock object)
}}}

=== Method constraints ===

{{{
subscriber./set.*/(_) // any setter is called on subscriber (any regular expression allowed)
}}}

=== Argument Constraints ===

{{{
subscriber.receive(_)                           // any argument

subscriber.receive(!null)                       // any non-null argument

subscriber.receive(msg)                         // any argument equal to msg

subscriber.receive(!msg)                        // any argument not equal to msg

subscriber.receive(_ as Message)                // any argument that is-a Message

subscriber.receive( { it.priority >= 5 } ) // custom constraint
}}}

=== Return Values ===

{{{
subscriber.isValid() >> true                     // single return value, repeated indefinitely

subscriber.isValid() >>> [true, false, true]     // multiple return values (anything that Groovy can iterate over), last one repeated indefinitely

def random = new Random()
subscriber.isValid() >> { random.nextBoolean() } // custom return value
}}}